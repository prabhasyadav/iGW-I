{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy as sc\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We already have large text content, equations and so we can add a simple numerical example here\n"
     ]
    }
   ],
   "source": [
    "print(\"We already have large text content, equations and so we can add a simple numerical example here\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We already have large text content, equations and so we can add a simple numerical example here\n"
     ]
    }
   ],
   "source": [
    "print(\"We already have large text content, equations and so we can add a simple numerical example here\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1. Determine if the aquifer is confined or unconfind and compute it's Transmissivity\n",
      "\n",
      " It is a unconfined aquifer\n",
      "\n",
      "The transmissivity is 2.55e-03 m²/s\n"
     ]
    }
   ],
   "source": [
    " # A bit more complicated numerical example here. An example from Prof. Liedl - we improve further.\n",
    "\n",
    "print(\"Q1. Determine if the aquifer is confined or unconfind and compute it's Transmissivity\")\n",
    "\n",
    "# input\n",
    "\n",
    "K = 8.5e-5 # m/s, hydraulic conductivity\n",
    "Ab = 120 # m asl, aquifer bottom elevation \n",
    "At = 150 # m asl, aquifer top elevation \n",
    "H  = 139 # m, hydraulic head\n",
    "\n",
    "#intermediate calculation\n",
    "A_T = At - Ab # m, Aquifer thickness\n",
    "S_T = np.minimum(A_T, (H - Ab))\n",
    "\n",
    "# Results\n",
    "\n",
    "if H < At:\n",
    "    print(\"\\n It is a unconfined aquifer\")\n",
    "else:\n",
    "    print(\"\\n It is a Confined aquifer\")\n",
    "    \n",
    "T = K*A_T # m²/s, Transmissivity\n",
    "\n",
    "print(\"\\nThe transmissivity is {0:0.2e} m\\u00b2/s\".format(T))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}