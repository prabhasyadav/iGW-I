{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Uniform Flow and Well*\n",
    "\n",
    "The worksheet addresses the superposition of uniform and radial steady-state groundwater flow <br>\n",
    "in a homogeneous, confined aquifer of uniform thickness without recharge. <br>\n",
    "The radial flow component may represent an extraction or injection well. <br>\n",
    "\n",
    "The worksheet calculates hydraulic head isolines (red), streamlines (blue / black), and isochrones (green) <br>\n",
    "by using an analytical solution. The set of streamlines includes the dividing streamline (black). <br>\n",
    "In addition, the capture width of the well (dashed lines) and the position of the stagnation point are determined. <br>\n",
    "Three travel time values representing isochrones can be selected by the user. <br>\n",
    "\n",
    "input parameters\t\t    |   units\t|   remarks\n",
    ":---------------------------|:----------|:--------------------------------------\n",
    "hydraulic conductivity\t\t|   m/s\t    |   enter positive number\n",
    "effective porosity\t\t    |   -\t    |   enter number between 0 and 1\n",
    "thickness\t\t            |   mm/a\t|   enter positive number\n",
    "uniform velocity\t\t    |   m/d\t    |   enter number different from zero$*$\n",
    "pumping rate\t\t        |   m³/d\t|   enter number different from zero$**$\n",
    "travel time\t\t            |   d\t    |   enter positive number\n",
    "\n",
    "\n",
    "$*$ Positive or negative numbers correspond to uniform flow in parallel with or antiparallel to the x-axis, resp. <br>\n",
    "$**$ Positive or negative numbers correspond to water extraction or injection, resp.\n",
    "\n",
    "\n",
    "**_Contributed by Ms. Anne Pförtner and Sophie Pförtner. The original concept from Prof. R. Liedl spreasheet code._**\n",
    "\n",
    "The codes are licensed under CC by 4.0 [(use anyways, but acknowledge the original work)](https://creativecommons.org/licenses/by/4.0/deed.en)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "213a4caf2a1945beb4a23dde4cb5180b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatLogSlider(value=0.0003, description='hydraulic conductivity [m/s]:', max=0.0, min=-…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from ipywidgets import *\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "#definition of the function \n",
    "def uniform_flow(K, ne, m, v, Q, t1, t2, t3):\n",
    "\n",
    "    #intermediate results \n",
    "    K_1 = K*86400                       #hydraulic conductivity [m/d]\n",
    "    capture_width = Q/m/v               #capture width [m]\n",
    "    L_ref = Q/(2*np.pi*np.exp(1)*m*v)   #[m]\n",
    "    h_ref = v/K_1*L_ref                 #[m]\n",
    "    t_ref = 0.5*ne*Q/np.pi/m/v**2       #[d]\n",
    "    stagnation_x = np.exp(1)*L_ref      #stagnation point (x) [m]\n",
    "    stagnation_y = 0                    #stagnation point (y) [m]\n",
    "\n",
    "    #isolines; Syntax: isolines_[X or Y]_plot_[h_ref]_[optional: 1 or 2]\n",
    "    isolines_x_plot_n5_1=[] \n",
    "    isolines_y_plot_n5_1=[]\n",
    "    isolines_x_plot_n5_2 = []\n",
    "    isolines_y_plot_n5_2 = []\n",
    "    isolines_x_plot_n2_5_1 = []\n",
    "    isolines_y_plot_n2_5_1 = []\n",
    "    isolines_x_plot_n2_5_2 = []\n",
    "    isolines_y_plot_n2_5_2 = []\n",
    "    isolines_x_plot_0_1 = []\n",
    "    isolines_y_plot_0_1 = []\n",
    "    isolines_x_plot_0_2 = []\n",
    "    isolines_y_plot_0_2 = []\n",
    "    isolines_x_plot_2_5 = []\n",
    "    isolines_y_plot_2_5 = []\n",
    "    isolines_x_plot_5 = []\n",
    "    isolines_y_plot_5 = []\n",
    "    isolines_x_plot_7_5 = []\n",
    "    isolines_y_plot_7_5 = []\n",
    "    isolines_x_plot_10 = []\n",
    "    isolines_y_plot_10 = []\n",
    "    isolines_x_plot_12_5 = []\n",
    "    isolines_y_plot_12_5 = []\n",
    "    isolines_x_plot_15 = []\n",
    "    isolines_y_plot_15 = []\n",
    "    \n",
    "    \n",
    "    for x in range(0, 100):\n",
    "        isolines_x_n5_1=L_ref*((x*0.169103048517306+(100-x)*-0.150360933444141)/100)\n",
    "        isolines_x_n5_2=L_ref*((x*12.35+(100-x)*11.6815653622516)/100)\n",
    "        isolines_x_n2_5_1=L_ref*((x*0.474722923528955+(100-x)*-0.350418198256065)/100)\n",
    "        isolines_x_n2_5_2=L_ref*((x*9.45+(100-x)*8.22933315122817)/100)\n",
    "        isolines_x_0_1=L_ref*((x*np.exp(1)+(100-x)*-0.75695357132717)/100)\n",
    "        isolines_x_0_2=L_ref*((x*6.65+(100-x)*np.exp(1))/100)\n",
    "        isolines_x_2_5=L_ref*((x*4+(100-x)*-1.46395392968976)/100)\n",
    "        isolines_x_5=L_ref*((x*1.5+(100-x)*-2.50444142220744)/100)\n",
    "        isolines_x_7_5=L_ref*((x*-0.875+(100-x)*-3.84154019983304)/100)\n",
    "        isolines_x_10=L_ref*((x*-3.15+(100-x)*-5.4105773228373)/100)\n",
    "        isolines_x_12_5=L_ref*((x*-5.4+(100-x)*-7.15205676143326)/100)\n",
    "        isolines_x_15=L_ref*((x*-7.65+(100-x)*-9.02099613666581)/100)\n",
    "        \n",
    "        if x == 0:\n",
    "            isolines_y_n5_1 = 0\n",
    "            isolines_y_n5_2 = 0\n",
    "            isolines_y_n2_5_1 = 0\n",
    "            isolines_y_n2_5_2 = 0\n",
    "            isolines_y_0_1 = 0\n",
    "            isolines_y_0_2 = 0\n",
    "            isolines_y_2_5 = 0\n",
    "            isolines_y_5 = 0\n",
    "            isolines_y_7_5 = 0\n",
    "            isolines_y_10 = 0\n",
    "            isolines_y_12_5 = 0\n",
    "            isolines_y_15 = 0\n",
    "            \n",
    "        else:\n",
    "            isolines_y_n5_1 = np.sqrt((L_ref*np.exp(-5/np.exp(1)+isolines_x_n5_1/L_ref/np.exp(1)))**2-isolines_x_n5_1**2)\n",
    "            isolines_y_n5_2 = np.sqrt((L_ref*np.exp(-5/np.exp(1)+isolines_x_n5_2/L_ref/np.exp(1)))**2-isolines_x_n5_2**2)\n",
    "            isolines_y_n2_5_1 = np.sqrt((L_ref*np.exp(-2.5/np.exp(1)+isolines_x_n2_5_1/L_ref/np.exp(1)))**2-isolines_x_n2_5_1**2)\n",
    "            isolines_y_n2_5_2 = np.sqrt((L_ref*np.exp(-2.5/np.exp(1)+isolines_x_n2_5_2/L_ref/np.exp(1)))**2-isolines_x_n2_5_2**2)\n",
    "            isolines_y_0_1 = np.sqrt((L_ref*np.exp(0/np.exp(1)+isolines_x_0_1/L_ref/np.exp(1)))**2-isolines_x_0_1**2)\n",
    "            isolines_y_0_2 = np.sqrt((L_ref*np.exp(0/np.exp(1)+isolines_x_0_2/L_ref/np.exp(1)))**2-isolines_x_0_2**2)\n",
    "            isolines_y_2_5 = np.sqrt((L_ref*np.exp(2.5/np.exp(1)+isolines_x_2_5/L_ref/np.exp(1)))**2-isolines_x_2_5**2)\n",
    "            isolines_y_5 = np.sqrt((L_ref*np.exp(5/np.exp(1)+isolines_x_5/L_ref/np.exp(1)))**2-isolines_x_5**2)\n",
    "            isolines_y_7_5 = np.sqrt((L_ref*np.exp(7.5/np.exp(1)+isolines_x_7_5/L_ref/np.exp(1)))**2-isolines_x_7_5**2)\n",
    "            isolines_y_10 = np.sqrt((L_ref*np.exp(10/np.exp(1)+isolines_x_10/L_ref/np.exp(1)))**2-isolines_x_10**2)\n",
    "            isolines_y_12_5 = np.sqrt((L_ref*np.exp(12.5/np.exp(1)+isolines_x_12_5/L_ref/np.exp(1)))**2-isolines_x_12_5**2)\n",
    "            isolines_y_15 = np.sqrt((L_ref*np.exp(15/np.exp(1)+isolines_x_15/L_ref/np.exp(1)))**2-isolines_x_15**2)\n",
    "        \n",
    "        isolines_x_plot_n5_1.append(isolines_x_n5_1)\n",
    "        isolines_y_plot_n5_1.append(isolines_y_n5_1)\n",
    "        isolines_x_plot_n5_2.append(isolines_x_n5_2)\n",
    "        isolines_y_plot_n5_2.append(isolines_y_n5_2)\n",
    "        isolines_x_plot_n2_5_1.append(isolines_x_n2_5_1)\n",
    "        isolines_y_plot_n2_5_1.append(isolines_y_n2_5_1)\n",
    "        isolines_x_plot_n2_5_2.append(isolines_x_n2_5_2)\n",
    "        isolines_y_plot_n2_5_2.append(isolines_y_n2_5_2)\n",
    "        isolines_x_plot_0_1.append(isolines_x_0_1)\n",
    "        isolines_y_plot_0_1.append(isolines_y_0_1)\n",
    "        isolines_x_plot_0_2.append(isolines_x_0_2)\n",
    "        isolines_y_plot_0_2.append(isolines_y_0_2)\n",
    "        isolines_x_plot_2_5.append(isolines_x_2_5)\n",
    "        isolines_y_plot_2_5.append(isolines_y_2_5)\n",
    "        isolines_x_plot_5.append(isolines_x_5)\n",
    "        isolines_y_plot_5.append(isolines_y_5)\n",
    "        isolines_x_plot_7_5.append(isolines_x_7_5)\n",
    "        isolines_y_plot_7_5.append(isolines_y_7_5)\n",
    "        isolines_x_plot_10.append(isolines_x_10)\n",
    "        isolines_y_plot_10.append(isolines_y_10)\n",
    "        isolines_x_plot_12_5.append(isolines_x_12_5)\n",
    "        isolines_y_plot_12_5.append(isolines_y_12_5)\n",
    "        isolines_x_plot_15.append(isolines_x_15)\n",
    "        isolines_y_plot_15.append(isolines_y_15)\n",
    "    \n",
    "    #streamlines; synthax: streamlines_[X or Y]_plot_[psi]\n",
    "    streamlines_x_plot_0 = [0, (L_ref*-10)]\n",
    "    streamlines_y_plot_0 = [0, 0]\n",
    "    streamlines_x_plot_0_2 = []\n",
    "    streamlines_y_plot_0_2 = []\n",
    "    streamlines_x_plot_0_4 = []\n",
    "    streamlines_y_plot_0_4 = []\n",
    "    streamlines_x_plot_0_6 = []\n",
    "    streamlines_y_plot_0_6 = []\n",
    "    streamlines_x_plot_0_8 = []\n",
    "    streamlines_y_plot_0_8 = []\n",
    "    streamlines_x_plot_1 = []\n",
    "    streamlines_y_plot_1 = []\n",
    "    streamlines_x_plot_1_2 = []\n",
    "    streamlines_y_plot_1_2 = []\n",
    "    streamlines_x_plot_1_4 = []\n",
    "    streamlines_y_plot_1_4 = []\n",
    "    streamlines_x_plot_1_6 = []\n",
    "    streamlines_y_plot_1_6 = []\n",
    "    \n",
    "    for x in range(0,100):\n",
    "        streamlines_y_0_2 = L_ref*((x*0+(100-x)*1.34462005667342)/100)\n",
    "        streamlines_y_0_4 = L_ref*((x*0+(100-x)*2.6992421745751)/100)\n",
    "        streamlines_y_0_6 = L_ref*((x*0+(100-x)*4.07255559164565)/100)\n",
    "        streamlines_y_0_8 = L_ref*((x*0+(100-x)*5.47097889806004)/100)\n",
    "        streamlines_y_1 = L_ref*((x*0+(100-x)*6.89826117541355)/100)\n",
    "        streamlines_y_1_2 = L_ref*((x*2.13413758353342+(100-x)*8.35561532789609)/100)\n",
    "        streamlines_y_1_4 = L_ref*((x*4.24381382643103+(100-x)*9.8422946888304)/100)\n",
    "        streamlines_y_1_6 = L_ref*((x*6.31283612436048+(100-x)*11.3562442221618)/100)\n",
    "\n",
    "        streamlines_x_0_2 = streamlines_y_0_2/np.tan(streamlines_y_0_2/L_ref/np.exp(1)-np.pi*0.2)\n",
    "        streamlines_x_0_4 = streamlines_y_0_4/np.tan(streamlines_y_0_4/L_ref/np.exp(1)-np.pi*0.4)\n",
    "        streamlines_x_0_6 = streamlines_y_0_6/np.tan(streamlines_y_0_6/L_ref/np.exp(1)-np.pi*0.6)\n",
    "        streamlines_x_0_8 = streamlines_y_0_8/np.tan(streamlines_y_0_8/L_ref/np.exp(1)-np.pi*0.8)\n",
    "        streamlines_x_1 = streamlines_y_1/np.tan(streamlines_y_1/L_ref/np.exp(1)-np.pi*1)\n",
    "        streamlines_x_1_2 = streamlines_y_1_2/np.tan(streamlines_y_1_2/L_ref/np.exp(1)-np.pi*1.2)\n",
    "        streamlines_x_1_4 = streamlines_y_1_4/np.tan(streamlines_y_1_4/L_ref/np.exp(1)-np.pi*1.4)\n",
    "        streamlines_x_1_6 = streamlines_y_1_6/np.tan(streamlines_y_1_6/L_ref/np.exp(1)-np.pi*1.6)\n",
    "        \n",
    "        streamlines_x_plot_0_2.append(streamlines_x_0_2)\n",
    "        streamlines_y_plot_0_2.append(streamlines_y_0_2)\n",
    "        streamlines_x_plot_0_4.append(streamlines_x_0_4)\n",
    "        streamlines_y_plot_0_4.append(streamlines_y_0_4)\n",
    "        streamlines_x_plot_0_6.append(streamlines_x_0_6)\n",
    "        streamlines_y_plot_0_6.append(streamlines_y_0_6)\n",
    "        streamlines_x_plot_0_8.append(streamlines_x_0_8)\n",
    "        streamlines_y_plot_0_8.append(streamlines_y_0_8)\n",
    "        streamlines_x_plot_1.append(streamlines_x_1)\n",
    "        streamlines_y_plot_1.append(streamlines_y_1)\n",
    "        streamlines_x_plot_1_2.append(streamlines_x_1_2)\n",
    "        streamlines_y_plot_1_2.append(streamlines_y_1_2)\n",
    "        streamlines_x_plot_1_4.append(streamlines_x_1_4)\n",
    "        streamlines_y_plot_1_4.append(streamlines_y_1_4)\n",
    "        streamlines_x_plot_1_6.append(streamlines_x_1_6)\n",
    "        streamlines_y_plot_1_6.append(streamlines_y_1_6)\n",
    "\n",
    "    #isochrones\n",
    "    isochrones_x_plot_t1 = []\n",
    "    isochrones_y_plot_t1 = []\n",
    "    isochrones_x_plot_t2 = []\n",
    "    isochrones_y_plot_t2 = []\n",
    "    isochrones_x_plot_t3 = []\n",
    "    isochrones_y_plot_t3 = []\n",
    "    \n",
    "    #iterate 5 times with start value t_xmin1/ t_xmax1\n",
    "    \n",
    "    t1_xmin1=-np.exp(1)*np.sqrt(np.exp(2*(t1/t_ref))-1)\n",
    "    t1_xmin6= t1_xmin1+(np.exp(1)-t1_xmin1)*(1+np.exp(1)/t1_xmin1*(np.log(1-t1_xmin1/np.exp(1))+(t1/t_ref)))\n",
    "    t1_xmax1= np.exp(1)*np.sqrt(1-np.exp(-2*(t1/t_ref)))\n",
    "    t1_xmax6= t1_xmax1+(np.exp(1)-t1_xmax1)*(1+np.exp(1)/t1_xmax1*(np.log(1-t1_xmax1/np.exp(1))+(t1/t_ref)))\n",
    "    t2_xmin1=-np.exp(1)*np.sqrt(np.exp(2*(t2/t_ref))-1)\n",
    "    t2_xmin6= t2_xmin1+(np.exp(1)-t2_xmin1)*(1+np.exp(1)/t2_xmin1*(np.log(1-t2_xmin1/np.exp(1))+(t2/t_ref)))\n",
    "    t2_xmax1=np.exp(1)*np.sqrt(1-np.exp(-2*(t2/t_ref)))\n",
    "    t2_xmax6= t2_xmax1+(np.exp(1)-t2_xmax1)*(1+np.exp(1)/t2_xmax1*(np.log(1-t2_xmax1/np.exp(1))+(t2/t_ref)))\n",
    "    t3_xmin1=-np.exp(1)*np.sqrt(np.exp(2*(t3/t_ref))-1)\n",
    "    t3_xmin6= t3_xmin1+(np.exp(1)-t3_xmin1)*(1+np.exp(1)/t3_xmin1*(np.log(1-t3_xmin1/np.exp(1))+(t3/t_ref)))\n",
    "    t3_xmax1=np.exp(1)*np.sqrt(1-np.exp(-2*(t3/t_ref)))\n",
    "    t3_xmax6= t3_xmax1+(np.exp(1)-t3_xmax1)*(1+np.exp(1)/t3_xmax1*(np.log(1-t3_xmax1/np.exp(1))+(t3/t_ref)))\n",
    "    for i in range(4):     \n",
    "        t1_xmin6= t1_xmin6+(np.exp(1)-t1_xmin6)*(1+np.exp(1)/t1_xmin6*(np.log(1-t1_xmin6/np.exp(1))+(t1/t_ref)))\n",
    "        t1_xmax6= t1_xmax6+(np.exp(1)-t1_xmax6)*(1+np.exp(1)/t1_xmax6*(np.log(1-t1_xmax6/np.exp(1))+(t1/t_ref)))\n",
    "        t2_xmin6= t2_xmin6+(np.exp(1)-t2_xmin6)*(1+np.exp(1)/t2_xmin6*(np.log(1-t2_xmin6/np.exp(1))+(t2/t_ref)))\n",
    "        t2_xmax6= t2_xmax6+(np.exp(1)-t2_xmax6)*(1+np.exp(1)/t2_xmax6*(np.log(1-t2_xmax6/np.exp(1))+(t2/t_ref)))\n",
    "        t3_xmin6= t3_xmin6+(np.exp(1)-t3_xmin6)*(1+np.exp(1)/t3_xmin6*(np.log(1-t3_xmin6/np.exp(1))+(t3/t_ref)))\n",
    "        t3_xmax6= t3_xmax6+(np.exp(1)-t3_xmax6)*(1+np.exp(1)/t3_xmax6*(np.log(1-t3_xmax6/np.exp(1))+(t3/t_ref)))\n",
    "\n",
    "    for x in range (0,100):\n",
    "    \n",
    "        isochrones_x_t1 = 0.5*L_ref*(t1_xmin6+t1_xmax6+(t1_xmax6-t1_xmin6)*np.cos(np.pi*(100-x)/100))\n",
    "        isochrones_x_t2 = 0.5*L_ref*(t2_xmin6+t2_xmax6+(t2_xmax6-t2_xmin6)*np.cos(np.pi*(100-x)/100))\n",
    "        isochrones_x_t3 = 0.5*L_ref*(t3_xmin6+t3_xmax6+(t3_xmax6-t3_xmin6)*np.cos(np.pi*(100-x)/100))\n",
    "\n",
    "        if x == 0:\n",
    "            isochrones_y_t1 = 0\n",
    "            isochrones_y_t2 = 0\n",
    "            isochrones_y_t3 = 0\n",
    "        else:\n",
    "        \n",
    "            isochrones_y1_t1 = L_ref*np.exp(1)*np.arccos((0.5*isochrones_x_t1/np.exp(1)/L_ref+np.exp(-(t1/t_ref)-isochrones_x_t1/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t1/np.exp(1)/L_ref))\n",
    "            isochrones_y_t1 = L_ref*np.exp(1)*np.arccos((isochrones_x_t1/L_ref*(np.sin(isochrones_y1_t1/np.exp(1)/L_ref)/(isochrones_y1_t1/L_ref)-0.5*np.cos(isochrones_y1_t1/np.exp(1)/L_ref)/np.exp(1))+np.exp(-(t1/t_ref)-isochrones_x_t1/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t1/np.exp(1)/L_ref))\n",
    "\n",
    "            isochrones_y1_t2 = L_ref*np.exp(1)*np.arccos((0.5*isochrones_x_t2/np.exp(1)/L_ref+np.exp(-(t2/t_ref)-isochrones_x_t2/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t2/np.exp(1)/L_ref))\n",
    "            isochrones_y_t2 = L_ref*np.exp(1)*np.arccos((isochrones_x_t2/L_ref*(np.sin(isochrones_y1_t2/np.exp(1)/L_ref)/(isochrones_y1_t2/L_ref)-0.5*np.cos(isochrones_y1_t2/np.exp(1)/L_ref)/np.exp(1))+np.exp(-(t2/t_ref)-isochrones_x_t2/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t2/np.exp(1)/L_ref))\n",
    "\n",
    "            isochrones_y1_t3 = L_ref*np.exp(1)*np.arccos((0.5*isochrones_x_t3/np.exp(1)/L_ref+np.exp(-(t3/t_ref)-isochrones_x_t3/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t3/np.exp(1)/L_ref))\n",
    "            isochrones_y_t3 = L_ref*np.exp(1)*np.arccos((isochrones_x_t3/L_ref*(np.sin(isochrones_y1_t3/np.exp(1)/L_ref)/(isochrones_y_t3/L_ref)-0.5*np.cos(isochrones_y1_t3/np.exp(1)/L_ref)/np.exp(1))+np.exp(-(t3/t_ref)-isochrones_x_t3/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t3/np.exp(1)/L_ref))\n",
    "\n",
    "            for i in range(4):\n",
    "                isochrones_y_t1 = L_ref*np.exp(1)*np.arccos((isochrones_x_t1/L_ref*(np.sin(isochrones_y_t1/np.exp(1)/L_ref)/(isochrones_y_t1/L_ref)-0.5*np.cos(isochrones_y_t1/np.exp(1)/L_ref)/np.exp(1))+np.exp(-(t1/t_ref)-isochrones_x_t1/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t1/np.exp(1)/L_ref))\n",
    "            \n",
    "                isochrones_y_t2 = L_ref*np.exp(1)*np.arccos((isochrones_x_t2/L_ref*(np.sin(isochrones_y_t2/np.exp(1)/L_ref)/(isochrones_y_t2/L_ref)-0.5*np.cos(isochrones_y_t2/np.exp(1)/L_ref)/np.exp(1))+np.exp(-(t2/t_ref)-isochrones_x_t2/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t2/np.exp(1)/L_ref))\n",
    "\n",
    "                isochrones_y_t3 = L_ref*np.exp(1)*np.arccos((isochrones_x_t3/L_ref*(np.sin(isochrones_y_t3/np.exp(1)/L_ref)/(isochrones_y_t3/L_ref)-0.5*np.cos(isochrones_y_t3/np.exp(1)/L_ref)/np.exp(1))+np.exp(-(t3/t_ref)-isochrones_x_t3/np.exp(1)/L_ref))/(1-0.5*isochrones_x_t3/np.exp(1)/L_ref))\n",
    "\n",
    "    \n",
    "        isochrones_x_plot_t1.append(isochrones_x_t1)\n",
    "        isochrones_y_plot_t1.append(isochrones_y_t1)\n",
    "        isochrones_x_plot_t2.append(isochrones_x_t2)\n",
    "        isochrones_y_plot_t2.append(isochrones_y_t2)\n",
    "        isochrones_x_plot_t3.append(isochrones_x_t3)\n",
    "        isochrones_y_plot_t3.append(isochrones_y_t3)\n",
    "\n",
    "    #still necessary: mirror on x-axis \n",
    "    isolines_y_plot_n5_1_mirror = -1*(np.asarray(isolines_y_plot_n5_1))\n",
    "    isolines_y_plot_n5_2_mirror = -1*(np.asarray(isolines_y_plot_n5_2))\n",
    "    isolines_y_plot_n2_5_1_mirror = -1*(np.asarray(isolines_y_plot_n2_5_1))\n",
    "    isolines_y_plot_n2_5_2_mirror = -1*(np.asarray(isolines_y_plot_n2_5_2))\n",
    "    isolines_y_plot_0_1_mirror = -1*(np.asarray(isolines_y_plot_0_1))\n",
    "    isolines_y_plot_0_2_mirror = -1*(np.asarray(isolines_y_plot_0_2))\n",
    "    isolines_y_plot_2_5_mirror = -1*(np.asarray(isolines_y_plot_2_5))\n",
    "    isolines_y_plot_5_mirror = -1*(np.asarray(isolines_y_plot_5))\n",
    "    isolines_y_plot_7_5_mirror = -1*(np.asarray(isolines_y_plot_7_5))\n",
    "    isolines_y_plot_10_mirror = -1*(np.asarray(isolines_y_plot_10))\n",
    "    isolines_y_plot_12_5_mirror = -1*(np.asarray(isolines_y_plot_12_5))\n",
    "    isolines_y_plot_15_mirror = -1*(np.asarray(isolines_y_plot_15))\n",
    "    \n",
    "    streamlines_y_plot_0_2_mirror = -1*(np.asarray(streamlines_y_plot_0_2))\n",
    "    streamlines_y_plot_0_4_mirror = -1*(np.asarray(streamlines_y_plot_0_4))\n",
    "    streamlines_y_plot_0_6_mirror = -1*(np.asarray(streamlines_y_plot_0_6))\n",
    "    streamlines_y_plot_0_8_mirror = -1*(np.asarray(streamlines_y_plot_0_8))\n",
    "    streamlines_y_plot_1_mirror = -1*(np.asarray(streamlines_y_plot_1))\n",
    "    streamlines_y_plot_1_2_mirror = -1*(np.asarray(streamlines_y_plot_1_2))\n",
    "    streamlines_y_plot_1_4_mirror = -1*(np.asarray(streamlines_y_plot_1_4))\n",
    "    streamlines_y_plot_1_6_mirror = -1*(np.asarray(streamlines_y_plot_1_6))\n",
    "\n",
    "    \n",
    "    isochrones_y_plot_t1_mirror = -1*(np.asarray(isochrones_y_plot_t1))\n",
    "    isochrones_y_plot_t2_mirror = -1*(np.asarray(isochrones_y_plot_t2))\n",
    "    isochrones_y_plot_t3_mirror = -1*(np.asarray(isochrones_y_plot_t3))\n",
    "    \n",
    "\n",
    "    fig, (ax1, ax2) = plt.subplots(2, figsize=(10, 10))\n",
    "\n",
    "    #plotten incl. mirror on x-axis\n",
    "\n",
    "    ax1.plot(isolines_x_plot_n5_1, isolines_y_plot_n5_1, 'r')\n",
    "    ax1.plot(isolines_x_plot_n5_2, isolines_y_plot_n5_2, 'r')\n",
    "    ax1.plot(isolines_x_plot_n2_5_1, isolines_y_plot_n2_5_1, 'r')\n",
    "    ax1.plot(isolines_x_plot_n2_5_2, isolines_y_plot_n2_5_2, 'r')\n",
    "    ax1.plot(isolines_x_plot_0_1, isolines_y_plot_0_1, 'r')\n",
    "    ax1.plot(isolines_x_plot_0_2, isolines_y_plot_0_2, 'r')\n",
    "    ax1.plot(isolines_x_plot_2_5, isolines_y_plot_2_5, 'r')\n",
    "    ax1.plot(isolines_x_plot_5, isolines_y_plot_5, 'r')\n",
    "    ax1.plot(isolines_x_plot_7_5, isolines_y_plot_7_5, 'r')\n",
    "    ax1.plot(isolines_x_plot_10, isolines_y_plot_10, 'r')\n",
    "    ax1.plot(isolines_x_plot_12_5, isolines_y_plot_12_5, 'r')\n",
    "    ax1.plot(isolines_x_plot_15, isolines_y_plot_15, 'r')\n",
    "\n",
    "    ax1.plot(isolines_x_plot_n5_1, isolines_y_plot_n5_1_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_n5_2, isolines_y_plot_n5_2_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_n2_5_1, isolines_y_plot_n2_5_1_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_n2_5_2, isolines_y_plot_n2_5_2_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_0_1, isolines_y_plot_0_1_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_0_2, isolines_y_plot_0_2_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_2_5, isolines_y_plot_2_5_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_5, isolines_y_plot_5_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_7_5, isolines_y_plot_7_5_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_10, isolines_y_plot_10_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_12_5, isolines_y_plot_12_5_mirror, 'r')\n",
    "    ax1.plot(isolines_x_plot_15, isolines_y_plot_15_mirror, 'r')\n",
    "\n",
    "    ax1.plot(streamlines_x_plot_0,streamlines_y_plot_0, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_2,streamlines_y_plot_0_2, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_4,streamlines_y_plot_0_4, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_6,streamlines_y_plot_0_6, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_8,streamlines_y_plot_0_8, 'b')\n",
    "    ax1.plot(streamlines_x_plot_1,streamlines_y_plot_1, color = 'black')\n",
    "    ax1.plot(streamlines_x_plot_1_2,streamlines_y_plot_1_2, 'b')\n",
    "    ax1.plot(streamlines_x_plot_1_4,streamlines_y_plot_1_4, 'b')\n",
    "    ax1.plot(streamlines_x_plot_1_6,streamlines_y_plot_1_6, 'b')\n",
    "\n",
    "    \n",
    "    ax1.plot(streamlines_x_plot_0_2,streamlines_y_plot_0_2_mirror, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_4,streamlines_y_plot_0_4_mirror, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_6,streamlines_y_plot_0_6_mirror, 'b')\n",
    "    ax1.plot(streamlines_x_plot_0_8,streamlines_y_plot_0_8_mirror, 'b')\n",
    "    ax1.plot(streamlines_x_plot_1,streamlines_y_plot_1_mirror, color = 'black')\n",
    "    ax1.plot(streamlines_x_plot_1_2,streamlines_y_plot_1_2_mirror, 'b')\n",
    "    ax1.plot(streamlines_x_plot_1_4,streamlines_y_plot_1_4_mirror, 'b')\n",
    "    ax1.plot(streamlines_x_plot_1_6,streamlines_y_plot_1_6_mirror, 'b')\n",
    "\n",
    "\n",
    "    ax1.set(xlabel='x [m]', ylabel ='y [m]', xlim = [-175, 225], ylim = [-175,175])\n",
    "    fig.savefig(\"isolines.png\", dpi=300)\n",
    "\n",
    "    ax2.plot(isochrones_x_plot_t1, isochrones_y_plot_t1, 'g')\n",
    "    ax2.plot(isochrones_x_plot_t2, isochrones_y_plot_t2, 'g')\n",
    "    ax2.plot(isochrones_x_plot_t3, isochrones_y_plot_t3, 'g')\n",
    "\n",
    "    ax2.plot(isochrones_x_plot_t1, isochrones_y_plot_t1_mirror, 'g')\n",
    "    ax2.plot(isochrones_x_plot_t2, isochrones_y_plot_t2_mirror, 'g')\n",
    "    ax2.plot(isochrones_x_plot_t3, isochrones_y_plot_t3_mirror, 'g')\n",
    "    \n",
    "    ax2.plot(streamlines_x_plot_0,streamlines_y_plot_0, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_2,streamlines_y_plot_0_2, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_4,streamlines_y_plot_0_4, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_6,streamlines_y_plot_0_6, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_8,streamlines_y_plot_0_8, 'b')\n",
    "    ax2.plot(streamlines_x_plot_1,streamlines_y_plot_1, color = 'black')\n",
    "    ax2.plot(streamlines_x_plot_1_2,streamlines_y_plot_1_2, 'b')\n",
    "    ax2.plot(streamlines_x_plot_1_4,streamlines_y_plot_1_4, 'b')\n",
    "    ax2.plot(streamlines_x_plot_1_6,streamlines_y_plot_1_6, 'b')\n",
    "    \n",
    "    \n",
    "    ax2.plot(streamlines_x_plot_0_2,streamlines_y_plot_0_2_mirror, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_4,streamlines_y_plot_0_4_mirror, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_6,streamlines_y_plot_0_6_mirror, 'b')\n",
    "    ax2.plot(streamlines_x_plot_0_8,streamlines_y_plot_0_8_mirror, 'b')\n",
    "    ax2.plot(streamlines_x_plot_1,streamlines_y_plot_1_mirror, color = 'black')\n",
    "    ax2.plot(streamlines_x_plot_1_2,streamlines_y_plot_1_2_mirror, 'b')\n",
    "    ax2.plot(streamlines_x_plot_1_4,streamlines_y_plot_1_4_mirror, 'b')\n",
    "    ax2.plot(streamlines_x_plot_1_6,streamlines_y_plot_1_6_mirror, 'b')\n",
    "    \n",
    "    \n",
    "\n",
    "    ax2.set(xlabel='x [m]', ylabel ='y [m]', xlim = [-175, 225], ylim = [-175,175])\n",
    "    fig.savefig(\"isochrones.png\", dpi=300)\n",
    "\n",
    "interact(uniform_flow,\n",
    "         K=widgets.FloatLogSlider(value=3e-4, base=10, min=-10, max=0, step=0.1, description='hydraulic conductivity [m/s]:', disabled=False),\n",
    "         ne=widgets.FloatSlider(value=0.2, min=0.001, max=1, step=0.05, description='effective porosity [-]:', disabled=False),\n",
    "         m= widgets.FloatSlider(value=7,min=0, max=30,step=1, description='thickness [m]:' , disabled=False),\n",
    "         v=widgets.FloatSlider(value=0.4, min=0.00001, max=5, step=0.1, description='uniform velocity [m/d]:', disabled=False),\n",
    "         Q=widgets.FloatSlider(value=800, min=100, max=1000, step=0.1, description='pumping rate [m^3/d]:', disabled=False),\n",
    "         t1=widgets.BoundedFloatText(value=10, min=1, max=100, step=0.1, description='t1 [d]:', disabled=False),\n",
    "         t2=widgets.BoundedFloatText(value=30, min=1, max=100, step=0.1, description='t2 [d]:', disabled=False),\n",
    "         t3=widgets.BoundedFloatText(value=50, min=1, max=100, step=0.1, description='t3 [d]:', disabled=False),\n",
    "         );\n",
    "         \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
